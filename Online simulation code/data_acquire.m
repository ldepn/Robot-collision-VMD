% Auto-generated by Data Acquisition Toolbox Analog Input Recorder on 2023-06-12 14:11:16
clc;
clear all;
close all;
warning off;

% delete(instrfindall);
% obj = serial('COM1','BaudRate',115200);
% set(obj,'DataBits',8);
% fopen(obj);
% size = 1;
% arrow = 0;
% arrow_j=0;
load('CNN.mat');
load('output_ps.mat');
load('train_ps.mat');
load('CNN_JOINT.mat');
load('output_ps_joint.mat');
load('train_ps_joint.mat');
data_serial = zeros(1,8);
data_j = 0;
j=1;
mark=0;
%% Create Data Acquisition Session
% Create a session for the specified vendor.
s = daq.createSession('ni');
 

%% Set Session Properties
% Set properties that are not using default values.
s.DurationInSeconds = 0.8;
% s.IsContinuous = true;
s.Rate = 4096;
%% Add Channels to Session
% Add channels and set channel properties, if any.
addAnalogInputChannel(s,'cDAQ1Mod1','ai0','Voltage');

addAnalogInputChannel(s,'cDAQ1Mod1','ai1','Voltage');

addAnalogInputChannel(s,'cDAQ1Mod1','ai2','Voltage');

addAnalogInputChannel(s,'cDAQ1Mod2','ai0','Voltage');

%% Acquire Data
% Start the session in foreground.】
for i = 1:1000000
% pause(0.1);

% disp("recv = "+data_r);
[data, timestamps, starttime] = startForeground(s);
ai0 = data(:,1);
ai1 = data(:,2);
ai2 = data(:,3);
ai3 = data(:,4);
DAQ_2 = timetable(seconds(timestamps),ai0,ai1,ai2,ai3);
% 抓取尖峰
a=ai2;
dataend = length(a);
threshold=0.0052;
turn = 1;
maxX=zeros(turn,1);
maxY=zeros(turn,1);
count = 1;

for i=2:dataend-1 
  if a(i,1)>threshold
      maxX(count) = i;
      maxY(count) = a(i,1);
      count=count+1;
  end
end
% for i=1:5
% data_r = fread(t_udp, 1);
% data_1 = typecast(uint8(data_r(1:8)),'double')
% data_2 = typecast(uint8(data_r(9:16)),'double')
% if abs(data_1>9)||abs(data_2>6)
%     mark = 1;
%     data1=data_1
%     data2=data_2
%     break;
% end
% end
% mark
  count
if  count < 3
    mark = mark+1
%  disp("no collsion");
 hand = 0;paper = 0;rubber = 0;iron = 0;link1 = 0;link2 = 0;
figure(1)
subplot(3,2,1)
plot([zeros(1,10) hand zeros(1,10)],'LineWidth',3);
subplot(3,2,2)
plot([zeros(1,10) paper zeros(1,10)],'LineWidth',3);
subplot(3,2,3)
plot([zeros(1,10) rubber zeros(1,10)],'LineWidth',3);
subplot(3,2,4)
plot([zeros(1,10) iron zeros(1,10)],'LineWidth',3);
subplot(3,2,5)
plot([zeros(1,10) link1 zeros(1,10)],'LineWidth',3);
subplot(3,2,6)
plot([zeros(1,10) link2 zeros(1,10)],'LineWidth',3);
jieguo = [hand paper rubber iron link1 link2];
save('output.txt','jieguo','-ascii', '-append');
DAQ=table2array(DAQ_2);
save('senor.txt','DAQ','-ascii', '-append');
% writetimetable(DAQ_2,'senor.txt');
else
%  for i=1:inf
%   data_r = fread(obj,size);
%   if arrow == 0 && data_r == 13
%    arrow =1;
%    arrow_j=0;
%   elseif arrow == 1 && data_r ~= 13 && data_r ~= 45
%    data_serial(j) = char(data_r); 
%    j=j+1;
%   elseif arrow == 1 && data_r == 13 && length(data_serial) == 8
%     arrow = 0;
%     data_j = str2num(char(data_serial));
%     j=1;
%     arrow_j=1;
%   end
%   if arrow_j==1 
%     arrow_j=0;
%     data1 = floor(data_j);
%     data2 = (data_j-data1)*1000;
%     if data1>0
%         break;
%     end
%   end
%  end


    for i=1:length(maxX)
        if maxY(i) == max(maxY)
            collsiontime = maxX(i);
        end
    end
% grouprange=zeros(turn+1,1);num = 2;
% for i=1:count-2
%     if maxX(i+1)-maxX(i)>1000
%         grouprange(num) = i;
%         test = i;
%         num=num+1;
%     end
% end
% grouprange(1)=1;
% grouprange(turn+1)=length(maxX);
% collsion1 = max(maxX(1:grouprange(1)));
% collsion2 = max(maxX(grouprange(1):grouprange(2)));
% collsion3 = max(maxX(grouprange(2):grouprange(3)));
% collsion4 = max(maxX(grouprange(3):end) );

% collsion = zeros(turn,1);
% collsiontime = zeros(turn,1);
% 
% for i=1:turn
%     collsion(i) = max(a(maxX(grouprange(i)+1):maxX(grouprange(i+1)),1));
% end

% collsion1 = max(a(maxX(1):maxX(grouprange(1)),1));
% collsion2 = max(a(maxX(grouprange(1)):maxX(grouprange(2)),1));
% collsion3 = max(a(maxX(grouprange(2)):maxX(grouprange(3)),1));
% collsion4 = max(a(maxX(grouprange(3)):maxX(grouprange(4)),1));
% for i=1:turn
%    for j=0:length(a(maxX(grouprange(i)):maxX(grouprange(i+1)),1))
%        if a(maxX(grouprange(i))+j) == collsion(i)
%        collsiontime(i) = maxX(grouprange(i))+j;
%        end
%        j=j+1;
%    end
%    i=i+1;
% end

T = zeros(turn,length([collsiontime(1)-205:collsiontime(1)+205]));

for i=1:turn
    T(i,:) = [collsiontime(i)-205:collsiontime(i)+205];
    if collsiontime(1)-205 < 0
    T(i,:) = [collsiontime(i)+2:collsiontime(i)+412];
    end
    if collsiontime(1)+205 > length(data(:,1))
    T(i,:) = [collsiontime(i)-412:collsiontime(i)-2];
    end
end
%      [a1]=butt(a(T(1,:)),60,500);
%      [a2]=butt(a(T(1,:)),500,827);
%      [a3]=butt(a(T(1,:)),827,1126);
%      [a4]=butt(a(T(1,:)),1126,1445);
%      [a5]=butt(a(T(1,:)),1445,1843);
%      [b1]=butt(ai1(T(1,:)),60,500);
%      [b2]=butt(ai1(T(1,:)),500,827);
%      [b3]=butt(ai1(T(1,:)),827,1126);
%      [b4]=butt(ai1(T(1,:)),1126,1445);
%      [b5]=butt(ai1(T(1,:)),1445,1843);
%      [c1]=butt(ai2(T(1,:)),60,500);
%      [c2]=butt(ai2(T(1,:)),500,827);
%      [c3]=butt(ai2(T(1,:)),827,1126);
%      [c4]=butt(ai2(T(1,:)),1126,1445);
%      [c5]=butt(ai2(T(1,:)),1445,1843);
%      [d1]=butt(ai3(T(1,:)),60,500);
%      [d2]=butt(ai3(T(1,:)),500,827);
%      [d3]=butt(ai3(T(1,:)),827,1126);
%      [d4]=butt(ai3(T(1,:)),1126,1445);
%      [d5]=butt(ai3(T(1,:)),1445,1843);
%%

%      [a1]=butt(a(T(1,:)),60,300);
%      [a2]=butt(a(T(1,:)),400,757);
%      [a3]=butt(a(T(1,:)),767,1156);
%      [a4]=butt(a(T(1,:)),1056,1514);
%      [a5]=butt(a(T(1,:)),1415,1793);
%      [b1]=butt(ai1(T(1,:)),60,300);
%      [b2]=butt(ai1(T(1,:)),400,757);
%      [b3]=butt(ai1(T(1,:)),767,1156);
%      [b4]=butt(ai1(T(1,:)),1056,1514);
%      [b5]=butt(ai1(T(1,:)),1415,1793);
%      [c1]=butt(ai2(T(1,:)),60,300);
%      [c2]=butt(ai2(T(1,:)),400,757);
%      [c3]=butt(ai2(T(1,:)),767,1156);
%      [c4]=butt(ai2(T(1,:)),1056,1514);
%      [c5]=butt(ai2(T(1,:)),1415,1793);
%      [d1]=butt(ai3(T(1,:)),60,300);
%      [d2]=butt(ai3(T(1,:)),400,757);
%      [d3]=butt(ai3(T(1,:)),767,1156);
%      [d4]=butt(ai3(T(1,:)),1056,1514);
%      [d5]=butt(ai3(T(1,:)),1415,1793);

%%
K=5;
    [u1, u_hat1, omega1] = VMD(a(T(1,:)), 2000, 0, K, 0, 1, 1e-7);
    [u2, u_hat2, omega2] = VMD(ai1(T(1,:)), 2000, 0, K, 0, 1, 1e-7);
    [u3, u_hat3, omega3] = VMD(ai2(T(1,:)), 2000, 0, K, 0, 1, 1e-7);
    [u4, u_hat4, omega4] = VMD(ai3(T(1,:)), 2000, 0, K, 0, 1, 1e-7);

fet1 = [omega1(end,:)*4000, max(abs(u1(1,:))), max(abs(u1(2,:))), max(abs(u1(3,:)))];
fet2 = [omega2(end,:)*4000, max(abs(u2(1,:))), max(abs(u2(2,:))), max(abs(u2(3,:)))];
fet3 = [omega3(end,:)*4000, max(abs(u3(1,:))), max(abs(u3(2,:))), max(abs(u3(3,:)))];
fet4 = [omega4(end,:)*4000, max(abs(u4(1,:))), max(abs(u4(2,:))), max(abs(u4(3,:)))];
% check = zeros(10,1);
% for i=1:10000
% data_r = fread(obj,size);
%   if arrow == 0 && data_r == 13
%    arrow =1;
%    arrow_j=0;
%   elseif arrow == 1 && data_r ~= 13 && data_r ~= 45
%    data_serial(j) = char(data_r); 
%    j=j+1;
%   elseif arrow == 1 && data_r == 13 && length(data_serial) == 8
%     arrow = 0;
%     data_j = str2num(char(data_serial));
%     j=1;
%     arrow_j=1;
%   end
%   if data_j>8 && arrow_j==1 
%     arrow_j=0;
%     break;
%   end
% end
%     data_cnn = [max(a1) max(a2) max(a3) max(a4) max(a5) ...
%                  max(b1) max(b2) max(b3) max(b4) max(b5) ...
%                  max(c1) max(c2) max(c3) max(c4) max(c5) ...
%                  max(d1) max(d2) max(d3) max(d4) max(d5) abs(data_j) ]';';abs(data2)
%  data_cnn_joint = [fet1, fet2, fet3, fet4,data1,data2]';
 data_cnn = [fet1, fet2, fet3, fet4]';
% data_cnn = [fet1/abs(data1), fet2/abs(data1), fet3/abs(data2), fet4/abs(data2)]';
% predict_value = sim(net,data_cnn);
% y = round(predict_value);
method=@mapminmax;
input= method('apply',data_cnn,train_ps);
input_joint= method('apply',data_cnn,train_ps_joint);
% input = reshape(input,[33,1,1,1]);
% input_joint = reshape(input_joint,[33,1,1,1]);
YPred=predict(net,input);
YPred_joint=predict(net_joint,input_joint);
% predict_value=method('reverse',YPred,output_ps);
% predict_value=double(predict_value)
[m predict_value] =max(YPred);
[m predict_value_joint] =max(YPred_joint);
% predict_value_joint=method('reverse',YPred_joint,output_ps);
% predict_value_joint=double(predict_value_joint);
hand = 0;paper = 0;rubber = 0;iron = 0;link1 = 0;link2 = 0;
if predict_value<1.5&&predict_value>0.5
%     disp("hand");
    hand = 1
elseif 1.5<predict_value&&predict_value<2.5
%     disp("paper");
    paper = 1
elseif 2.5<predict_value&&predict_value<3.5
%     disp("rubber");
    rubber = 1
elseif 3.5<predict_value
%     disp("iron");
    iron = 1
% elseif -0.5<predict_value&&predict_value<0.5
%         disp("no hand");
end
if 0<predict_value_joint&&predict_value_joint<1.7
%     disp("link1");
    link1 = 1
elseif 1.7<predict_value_joint
%     disp("link2");
     link2 = 1
end
figure(1)
subplot(3,2,1)
plot([zeros(1,10) hand zeros(1,10)],'LineWidth',3);
subplot(3,2,2)
plot([zeros(1,10) paper zeros(1,10)],'LineWidth',3);
subplot(3,2,3)
plot([zeros(1,10) rubber zeros(1,10)],'LineWidth',3);
subplot(3,2,4)
plot([zeros(1,10) iron zeros(1,10)],'LineWidth',3);
subplot(3,2,5)
plot([zeros(1,10) link1 zeros(1,10)],'LineWidth',3);
subplot(3,2,6)
plot([zeros(1,10) link2 zeros(1,10)],'LineWidth',3);
jieguo = [hand paper rubber iron link1 link2];
save('output.txt','jieguo','-ascii', '-append');
DAQ=table2array(DAQ_2);
save('senor.txt','DAQ','-ascii', '-append');
% if y==1
%     disp("hand");
% elseif y==2
%     disp("paper");
% elseif y==3
%     disp("iron");
% elseif y==4
%     disp("rubber");
% end
mark = mark + 1
T = zeros(turn,length([collsiontime(1)-205:collsiontime(1)+205]));
end


% subplot(4,1,1)
% plot(DAQ_2.Time, ai0)
% xlabel('Time')
% ylabel('Amplitude (V)')
% legend('ai0')%DAQ_2.Properties.VariableNames
% subplot(4,1,2)
% plot(DAQ_2.Time, ai1)
% xlabel('Time')
% ylabel('Amplitude (V)')
% legend('ai1')
% subplot(4,1,3)
% plot(DAQ_2.Time, ai2)
% xlabel('Time')
% ylabel('Amplitude (V)')
% legend('ai2')
% subplot(4,1,4)
% plot(DAQ_2.Time, ai3)
% % plot(DAQ_2.Time, DAQ_2.Variables)
% xlabel('Time')
% ylabel('Amplitude (V)')
% legend('ai3')
end
%% Log Data
% Convert the acquired data and timestamps to a timetable in a workspace variable.
ai0 = data(:,1);
ai1 = data(:,2);
ai2 = data(:,3);
ai3 = data(:,4);
DAQ_2 = timetable(seconds(timestamps),ai0,ai1,ai2,ai3);

%% Plot Data
% Plot the acquired data on labeled axes.
subplot(4,1,1)
plot(DAQ_2.Time, ai0)
xlabel('Time')
ylabel('Amplitude (V)')
legend('ai0')%DAQ_2.Properties.VariableNames
subplot(4,1,2)
plot(DAQ_2.Time, ai1)
xlabel('Time')
ylabel('Amplitude (V)')
legend('ai1')
subplot(4,1,3)
plot(DAQ_2.Time, ai2)
xlabel('Time')
ylabel('Amplitude (V)')
legend('ai2')
subplot(4,1,4)
plot(DAQ_2.Time, ai3)
% plot(DAQ_2.Time, DAQ_2.Variables)
xlabel('Time')
ylabel('Amplitude (V)')
legend('ai3')

%% Clean Up
% Clear the session and channels, if any.
clear s

